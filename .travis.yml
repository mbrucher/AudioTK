
sudo: required
language: c++

notifications:
  email: false
  # gitter
  webhooks:
    urls:
    - https://webhooks.gitter.im/e/b43314c68a0082edd974
    on_success: always
    on_failure: always
git:
  depth: 500

matrix:
  include:
  - compiler: gcc-9
    os: linux
    dist: bionic
    python: 3.7
    addons:
      apt:
        sources:
        - ubuntu-toolchain-r-test
        packages:
        - g++-9
        - libfftw3-dev
        - libsndfile-dev
        - swig
        - libatlas-base-dev
        - lcov
        - curl
      sonarcloud:
        organization: "mbrucher-github"
    env:
    - MY_NAME: Static Analysis
    - COMPILER=g++-9
    - PLATFORM=gcc-9
    - ENABLE_PYTHON=OFF
    - ENABLE_STATIC_ANALYSIS=ON
    - ENABLE_CODECOVERAGE=ON
    - GCOV_VERSION=gcov-9
    - Python_ADDITIONAL_VERSIONS=3.7.1
    - BUILD_TYPE=Coverage
    - MAKE_WRAPPER="build-wrapper-linux-x86-64 --out-dir bw-outputs "
    - ADDITONAL_CMAKE_FLAGS="-DPYTHON_LIBRARY=/opt/python/${Python_ADDITIONAL_VERSIONS}/lib/libpython${PYTHON_VERSION}.so -DPYTHON_INCLUDE_DIR=/opt/python/${Python_ADDITIONAL_VERSIONS}/include/python${PYTHON_VERSION} -DPYTHON_EXECUTABLE=/opt/python/${Python_ADDITIONAL_VERSIONS}/bin/python -DENABLE_CODECOVERAGE=ON -DENABLE_STATIC_LIBRARIES=OFF"
  - compiler: gcc-7
    os: linux
    dist: xenial
    python: 3.7
    addons:
      apt:
        sources:
        - ubuntu-toolchain-r-test
        packages:
        - g++-7
        - libfftw3-dev
        - libsndfile-dev
        - swig
        - libatlas-base-dev
        - curl
      sonarcloud:
        organization: "mbrucher-github"
    env:
    - MY_NAME: Static Analysis
    - COMPILER=g++-7
    - PLATFORM=gcc-7
    - ENABLE_PYTHON=OFF
    - ENABLE_STATIC_ANALYSIS=ON
    - ENABLE_CODECOVERAGE=ON
    - GCOV_VERSION=gcov-7
    - Python_ADDITIONAL_VERSIONS=3.7.1
    - BUILD_TYPE=Coverage
    - MAKE_WRAPPER="build-wrapper-linux-x86-64 --out-dir bw-outputs "
    - ADDITONAL_CMAKE_FLAGS="-DPYTHON_LIBRARY=/opt/python/${Python_ADDITIONAL_VERSIONS}/lib/libpython${PYTHON_VERSION}.so -DPYTHON_INCLUDE_DIR=/opt/python/${Python_ADDITIONAL_VERSIONS}/include/python${PYTHON_VERSION} -DPYTHON_EXECUTABLE=/opt/python/${Python_ADDITIONAL_VERSIONS}/bin/python -DENABLE_CODECOVERAGE=ON -DENABLE_STATIC_LIBRARIES=OFF"
  - compiler: gcc-9
    os: linux
    dist: bionic
    python: 3.7
    addons:
      apt:
        sources:
        - ubuntu-toolchain-r-test
        packages:
        - g++-9
        - libfftw3-dev
        - libsndfile-dev
        - swig
    env:
    - MY_NAME: GCC 9
    - COMPILER=g++-9
    - PLATFORM=gcc-9
    - ENABLE_PYTHON=ON
    - PYTHON_VERSION=3.7
    - PYTHON=python3
    - Python_ADDITIONAL_VERSIONS=3.7.1
    - BUILD_TYPE=Release
    - ADDITONAL_CMAKE_FLAGS="-DPYTHON_LIBRARY=/opt/python/${Python_ADDITIONAL_VERSIONS}/lib/libpython${PYTHON_VERSION}.so -DPYTHON_INCLUDE_DIR=/opt/python/${Python_ADDITIONAL_VERSIONS}/include/python${PYTHON_VERSION} -DPYTHON_EXECUTABLE=/opt/python/${Python_ADDITIONAL_VERSIONS}/bin/python -DENABLE_STATIC_LIBRARIES=ON"
  - compiler: gcc-7
    os: linux
    dist: xenial
    python: 3.7
    addons:
      apt:
        sources:
        - ubuntu-toolchain-r-test
        packages:
        - g++-7
        - libfftw3-dev
        - libsndfile-dev
        - swig
    env:
    - MY_NAME: GCC 7
    - COMPILER=g++-7
    - PLATFORM=gcc-7
    - ENABLE_PYTHON=ON
    - PYTHON_VERSION=3.7
    - PYTHON=python3
    - Python_ADDITIONAL_VERSIONS=3.7.1
    - BUILD_TYPE=Release
    - ADDITONAL_CMAKE_FLAGS="-DPYTHON_LIBRARY=/opt/python/${Python_ADDITIONAL_VERSIONS}/lib/libpython${PYTHON_VERSION}.so -DPYTHON_INCLUDE_DIR=/opt/python/${Python_ADDITIONAL_VERSIONS}/include/python${PYTHON_VERSION} -DPYTHON_EXECUTABLE=/opt/python/${Python_ADDITIONAL_VERSIONS}/bin/python -DENABLE_STATIC_LIBRARIES=ON"
  - compiler: clang-9
    os: linux
    dist: bionic
    addons:
      apt:
        sources:
        - ubuntu-toolchain-r-test
        - sourceline: 'deb https://apt.llvm.org/bionic/ llvm-toolchain-bionic-9 main'
          key_url: 'https://apt.llvm.org/llvm-snapshot.gpg.key'
        packages:
        - clang-9
        - g++-9
        - libfftw3-dev
        - libsndfile-dev
        - swig
        - libatlas-base-dev
    env:
    - MY_NAME=ASAN
    - COMPILER=clang++-9.0
    - PLATFORM=clang-9
    - ENABLE_PYTHON=OFF
    - BUILD_TYPE=Debug
    - ASAN_OPTIONS=verbosity=1:detect_stack_use_after_return=true
    - LD_PRELOAD_=/usr/lib/llvm-9.0/lib/clang/9.0.1/lib/linux/libclang_rt.asan-x86_64.so
    - ADDITONAL_CMAKE_FLAGS="-DENABLE_ADDRESS_SANITIZER=ON -DENABLE_STATIC_LIBRARIES=OFF"
  - compiler: clang-9
    os: linux
    dist: bionic
    addons:
      apt:
        sources:
        - ubuntu-toolchain-r-test
        - sourceline: 'deb https://apt.llvm.org/bionic/ llvm-toolchain-bionic-9 main'
          key_url: 'https://apt.llvm.org/llvm-snapshot.gpg.key'
        packages:
        - clang-9
        - g++-9
        - libfftw3-dev
        - libsndfile-dev
        - swig
        - libatlas-base-dev
        - curl
    env:
    - MY_NAME=LLVM coverage
    - COMPILER=clang++-9.0
    - PLATFORM=clang-9
    - ENABLE_PYTHON=OFF
    - BUILD_TYPE=Debug
    - ENABLE_CODECOVERAGE=ON
    - ADDITONAL_CMAKE_FLAGS="-DENABLE_CODECOVERAGE=ON -DLCOV_SCRIPT=--gcov-tool=scripts/llvm-gcov.sh -DENABLE_STATIC_LIBRARIES=OFF"
  - compiler: clang-9
    os: linux
    dist: bionic
    python: 3.7
    addons:
      apt:
        sources:
        - ubuntu-toolchain-r-test
        - sourceline: 'deb https://apt.llvm.org/bionic/ llvm-toolchain-bionic-9 main'
          key_url: 'https://apt.llvm.org/llvm-snapshot.gpg.key'
        packages:
        - clang-9
        - g++-9
        - libfftw3-dev
        - libsndfile-dev
        - swig
    env:
    - MY_NAME: clang 9
    - COMPILER=clang++-9.0
    - PLATFORM=clang-9
    - ENABLE_PYTHON=ON
    - PYTHON_VERSION=3.7
    - PYTHON=python3
    - Python_ADDITIONAL_VERSIONS=3.7.1
    - BUILD_TYPE=Release
    - ADDITONAL_CMAKE_FLAGS="-DDISABLE_PYTHON_TESTS=ON -DPYTHON_LIBRARY=/opt/python/${Python_ADDITIONAL_VERSIONS}/lib/libpython${PYTHON_VERSION}.so -DPYTHON_INCLUDE_DIR=/opt/python/${Python_ADDITIONAL_VERSIONS}/include/python${PYTHON_VERSION} -DPYTHON_EXECUTABLE=/opt/python/${Python_ADDITIONAL_VERSIONS}/bin/python -DENABLE_STATIC_LIBRARIES=ON"
  - os: osx
    osx_image: xcode12
    python: 3.7
    env:
    - MY_NAME: XCode 12
    - COMPILER=clang++
    - PLATFORM=xcode-12
    - ADDITONAL_CMAKE_FLAGS=-DDISABLE_PYTHON_TESTS=ON -DCMAKE_OSX_ARCHITECTURES="x86_64" -DENABLE_STATIC_LIBRARIES=ON
    - ENABLE_PYTHON=ON
    - PYTHON_VERSION=3.7
    - PYTHON=python
    - Python_ADDITIONAL_VERSIONS=3.7
    - BUILD_TYPE=Release
  - os: osx
    osx_image: xcode11
    python: 3.7
    env:
    - MY_NAME: XCode 11
    - COMPILER=clang++
    - PLATFORM=xcode-11.6
    - ADDITONAL_CMAKE_FLAGS=-DDISABLE_PYTHON_TESTS=ON -DCMAKE_OSX_ARCHITECTURES="i386,x86_64" -DENABLE_STATIC_LIBRARIES=ON
    - ENABLE_PYTHON=ON
    - PYTHON_VERSION=3.7
    - PYTHON=python
    - Python_ADDITIONAL_VERSIONS=3.7
    - BUILD_TYPE=Release
  - os: osx
    osx_image: xcode10
    python: 3.7
    env:
    - MY_NAME: XCode 10
    - COMPILER=clang++
    - PLATFORM=xcode-10.3
    - ADDITONAL_CMAKE_FLAGS=-DDISABLE_PYTHON_TESTS=ON -DCMAKE_OSX_ARCHITECTURES="i386,x86_64" -DENABLE_STATIC_LIBRARIES=ON
    - ENABLE_PYTHON=ON
    - PYTHON_VERSION=3.7
    - PYTHON=python
    - Python_ADDITIONAL_VERSIONS=3.7
    - BUILD_TYPE=Release
  allow_failures:
  - compiler: gcc-9
  - compiler: clang-9

before_install:
  - ls /usr/lib/clang/ | echo 0
  - mkdir -p $HOME/usr/bin
  - export PATH="$HOME/usr/bin:$PATH"
  - |
    if [[ "${ENABLE_CODECOVERAGE}" = "ON" ]]; then
      ls /usr/bin
      ln -s /usr/bin/$GCOV_VERSION $HOME/usr/bin/gcov
      wget http://ftp.de.debian.org/debian/pool/main/l/lcov/lcov_1.14.orig.tar.gz
      tar xf lcov_1.14.orig.tar.gz
      sudo make -C lcov-1.14 install
    fi
  - |
    if [[ "$TRAVIS_OS_NAME" != "osx" ]]; then
      ls /opt/python/
      wget https://cmake.org/files/v3.12/cmake-3.12.1-Linux-x86_64.sh
      chmod +x cmake-3.12.1-Linux-x86_64.sh
      ./cmake-3.12.1-Linux-x86_64.sh --prefix=$HOME/usr --exclude-subdir --skip-license
      if [[ "$ENABLE_PYTHON" == "ON" ]]; then
        ls /opt/python/
        /opt/python/${Python_ADDITIONAL_VERSIONS}/bin/python${Python_ADDITIONAL_VERSIONS} -m pip install numpy scipy nose
      fi
    fi

  - |
    if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
      brew update
      rm -f /usr/local/include/c++
      brew install fftw libsndfile swig
      brew upgrade cmake
      if [[ "$ENABLE_PYTHON" == "ON" ]]; then
        if [[ "$PYTHON" == "python3" ]]; then brew upgrade python ; fi
        ${PYTHON} -V
        sudo ${PYTHON} -m pip install numpy scipy nose
      fi
    fi

  - wget --no-verbose --output-document=boost_1_68_0.tar.bz2 http://sourceforge.net/projects/boost/files/boost/1.68.0/boost_1_68_0.tar.bz2/download
  - export BOOST_ROOT="$TRAVIS_BUILD_DIR/../boost"
  - export BOOST_BUILD="$TRAVIS_BUILD_DIR/../boost-build"
  - mkdir -p $BOOST_ROOT
  - tar jxf boost_1_68_0.tar.bz2 --strip-components=1 -C $BOOST_ROOT

install:
  - "(cd $BOOST_ROOT; ./bootstrap.sh --with-libraries=system,test)"
  - "(cd $BOOST_ROOT; ./b2 threading=multi --prefix=$BOOST_BUILD -d0 install)"

before_script:
  - mkdir build
  - cd build
  - ${MAKE_WRAPPER} cmake -DENABLE_GPL=ON -DDISABLE_EIGEN_WARNINGS=ON -DCMAKE_CXX_COMPILER=$COMPILER -DBOOST_ROOT=$BOOST_BUILD -DCMAKE_INSTALL_PREFIX=${HOME}/ATK -DCMAKE_BUILD_TYPE=${BUILD_TYPE} -DENABLE_PYTHON=${ENABLE_PYTHON} ${ADDITONAL_CMAKE_FLAGS} ..

script:
  - pwd
  - if [[ "$TRAVIS_OS_NAME" != "osx" ]]; then export LD_LIBRARY_PATH=${HOME}/ATK/lib:$LD_LIBRARY_PATH ; fi
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then export DYLD_LIBRARY_PATH=${HOME}/ATK/lib:$BOOST_BUILD/lib ; fi
  - ${MAKE_WRAPPER} make -j16
  - make install
  - export PYTHONPATH=${HOME}/ATK/lib/site-packages/:$PYTHONPATH
  - echo $DYLD_LIBRARY_PATH
  - echo $LD_LIBRARY_PATH
  - ls ${HOME}/ATK/lib
  - |
    if [[ "${ENABLE_CODECOVERAGE}" = "ON" ]]; then
      export PATH=${TRAVIS_BUILD_DIR}/script/:${PATH}
      VERBOSE=1 CTEST_OUTPUT_ON_FAILURE=TRUE make codecoverage
    else
      LD_PRELOAD=${LD_PRELOAD_} CTEST_OUTPUT_ON_FAILURE=TRUE make test
    fi

after_success:
  - |
    if [[ "${ENABLE_CODECOVERAGE}" = "ON" ]]; then
      bash <(curl -s https://codecov.io/bash) || echo "Codecov did not collect coverage reports"
    else
      cd ${HOME}/ATK
      tar -cvzf ${HOME}/AudioTK.${TRAVIS_OS_NAME}.${PLATFORM}.py${PYTHON_VERSION}.tar.gz *
    fi
  - |
    if [[ "${ENABLE_STATIC_ANALYSIS}" = "ON" ]]; then
      cd ..
      sonar-scanner
      cd build
      ls
    fi
  - |
    if [[ "${ENABLE_CODECOVERAGE}" = "ON" ]]; then
      exit
    fi

deploy:
  provider: releases
  api_key:
    secure: ilhQ9vSyOl+QjRiRebj7CuQPYY1OygH3YxEuuFOXVa1cN4iw5yid2igEScLfKB5Xn2x2jMYDqL4bC6nLMHa1GNtCTIhCJrrHhXPeYX1W1EsOtExfAbD1G0QvUoQPZEBnK1Lu2Uf+qiQaH1IEquhzux8dxRCe/qJJzpntoWiLgm6po1giUAyQGsVzKlon4dxhgq08QcYxaQq2snOcKFJVx+zfeELfB7RZeEQXymtlMosMWnoKv3tjtFI5crWWdjD8oYKaTdLEms5EmR/cXAoYZ8jkhW0mTn1j9Ww9gaN4f/AnIlZDyggsdxVsV77rW/Kh6qqUdRbWaAnnpDgozv/HNXkgrFpxNyevIiS/pfbiyIT1zqT+iy4N9ofuc8iWuXncom3tDK/aGU+KS693ZkeLkkOT+FhT3YnIwE7UHeRS/Lqn26FQXQ/u7stuYVxCTrGR+LsfOrQdxmkQVOKicbWlOkU0+JpccaoES+j7SSCGgUkO/5f8bFzTraEu5VCN9pTuMX7TIp8OwS7b13L/TZGPwoeJDBtn5SsUl/1cqpuJbjQvf0KQqp6tJcQ8LjS9K0WrtVB+T2coQC5vYz5pM4RhYcGavj6a9+RM6U13PDvpHgP5ec5zeGbNJ2QKHLZ8s0LiuSMgffhp0vsl8E0nWjpelnSIDPtCLv5xAtk47vn+aiQ=
  file: ${HOME}/AudioTK.${TRAVIS_OS_NAME}.${PLATFORM}.py${PYTHON_VERSION}.tar.gz
  skip_cleanup: true
  on:
    repo: mbrucher/AudioTK
    tags: true
